<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="..\Common.props" />

    <PropertyGroup>
        <TargetFramework>netstandard2.1</TargetFramework>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>

        <!-- Number of instances of the game to start to test the plugin -->
        <NumberOfClients>1</NumberOfClients>
        <!-- Delay between each start of the game in seconds -->
        <DelayBetweenClientsInSeconds>5</DelayBetweenClientsInSeconds>
        <!-- To apply the correct delay between each instance, we need to add 1 to the delay because the first "echo" sent by the ping command is instant -->
        <PingDelay>$([MSBuild]::Add($(DelayBetweenClientsInSeconds), 1))</PingDelay>
        <!-- True to start the game when the plugin is built, false to only copy the plugin to the game's plugin directory -->
        <StartGame>true</StartGame>

        <!-- Prefix of the git tag -->
        <!-- The tag must be in the format v1.2.3 -->
        <!-- https://github.com/adamralph/minver#options -->
        <MinVerTagPrefix>v</MinVerTagPrefix>
        <FileVersion>0.5.0</FileVersion>
        <AssemblyVersion>0.5.0</AssemblyVersion>
    </PropertyGroup>

    <ItemGroup>
      <None Remove="assetBundles\lethalphonecustomizations" />
      <None Remove="assetBundles\lethalphonesassets" />
    </ItemGroup>

    <ItemGroup>
      <Content Include="assetBundles\lethalphonecustomizations">
        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      </Content>
      <Content Include="assetBundles\lethalphonesassets">
        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      </Content>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
        <PackageReference Include="BepInEx.Core" Version="5.*" />
        <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*" />
        <PackageReference Include="FSharp.Core" Version="9.0.101" />
        <PackageReference Include="HarmonyX" Version="2.14.0" />
        <PackageReference Include="UnityEngine.Modules" Version="2022.3.9" IncludeAssets="compile" />
    </ItemGroup>

    <ItemGroup>
      <Reference Include="DissonanceVoip">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\Lethal Company_Data\Managed\DissonanceVoip.dll</HintPath>
      </Reference>
      <Reference Include="LethalCompanyInputUtils">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\BepInEx\plugins\LethalCompanyInputUtils\LethalCompanyInputUtils.dll</HintPath>
      </Reference>
      <Reference Include="LethalLib">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\BepInEx\plugins\LethalLib\LethalLib.dll</HintPath>
      </Reference>
      <Reference Publicize="true" Include="Mirage">
        <HintPath>..\..\..\Stuff\Modding\Lethal Company\Mirage\Mirage.dll</HintPath>
      </Reference>
      <Reference Include="Mirage.Core">
        <HintPath>..\..\..\Stuff\Modding\Lethal Company\Mirage\Mirage.Core.dll</HintPath>
      </Reference>
      <Reference Include="Unity.Animation.Rigging">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\Lethal Company_Data\Managed\Unity.Animation.Rigging.dll</HintPath>
      </Reference>
      <Reference Include="Unity.TextMeshPro">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\Lethal Company_Data\Managed\Unity.TextMeshPro.dll</HintPath>
      </Reference>
      <Reference Include="UnityEngine.UI">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\Lethal Company_Data\Managed\UnityEngine.UI.dll</HintPath>
      </Reference>
      <Reference Publicize="true" Include="UnityEngine.Netcode.Runtime">
        <HintPath>..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Lethal Company\Lethal Company_Data\Managed\Unity.Netcode.Runtime.dll</HintPath>
      </Reference>
      <Reference Include="WeatherRegistry">
        <HintPath>..\..\..\Stuff\Modding\Lethal Company\WeatherRegistry\WeatherRegistry.dll</HintPath>
      </Reference>
      <Reference Publicize="true" Include="WeatherTweaks">
        <HintPath>..\..\..\Stuff\Modding\Lethal Company\WeatherTweaks\WeatherTweaks.dll</HintPath>
      </Reference>
    </ItemGroup>

    <ItemGroup>
      <PackageReference Update="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
    </ItemGroup>

    <!-- https://github.com/EvaisaDev/UnityNetcodePatcher#usage-as-a-post-build-event -->
    <!-- Syntax to use the tool installed globally -->
    <!-- Allows to patch elements like networked behaviours, RPCs, etc. -->
    <Target Name="NetcodePatch" AfterTargets="PostBuildEvent">
        <Exec Command="netcode-patch &quot;$(TargetPath)&quot; @(ReferencePathWithRefAssemblies->'&quot;%(Identity)&quot;', ' ')" />
    </Target>

    <!-- Avoid that the game's assemblies are copied to the plugin's target directory -->
    <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
        </ItemGroup>
    </Target>

    <!-- Move the plugin to the game's plugin directory and start the game to test it -->
    <Target Condition="'$(CI)' != 'true' And $(StartGame)" Name="StartGame" AfterTargets="PostBuildEvent">
        <PropertyGroup>
          <PluginVersion>1.3.8</PluginVersion>
        </PropertyGroup>
        <!-- Create a temporary copy of the plugin in the target directory -->
        <!-- This is a workaround because if we copy it directly to the game's plugin directory, an error is thrown because the game is using the plugin -->
        <Copy SourceFiles="$(TargetDir)$(TargetFileName)" DestinationFiles="$(TargetDir)$(TargetFileName).tmp" />
        <!-- Move the plugin temporary copy to the game's plugin directory -->
        <!-- The move command will overwrite the plugin if it already exists and no error will be thrown -->
        <!-- We can't move the original plugin because it is used by reference for Test project -->
        <Move SourceFiles="$(TargetDir)$(TargetFileName).tmp" DestinationFiles="$(PluginGameDir)$(RootNamespace)-$(ProjectName)-$(PluginVersion)\$(TargetFileName)" />
        <!-- Move Asset Bundle Files as well -->
        <Exec Command="move /y &quot;$(TargetDir)assetBundles\$(AssetBundleName)&quot; &quot;$(PluginGameDir)$(RootNamespace)-$(ProjectName)-$(PluginVersion)\&quot;" />
        <Exec Command="move /y &quot;$(TargetDir)assetBundles\$(CustomizationBundleName)&quot; &quot;$(PluginGameDir)$(RootNamespace)-$(ProjectName)-$(PluginVersion)\&quot;" />
        <!-- Kill every instance of the game, ignore errors if none are running -->
        <Exec Command="taskkill /F /IM &quot;$(GameExe)&quot; /T 2&gt;nul 1&gt;nul || exit 0" />
        <!-- Start new instances of the game as many times as specified in NumberOfClients -->
        <!-- The ping command is used to apply a delay between each instance, otherwise only one BepInEx debug terminal would be opened -->
        <!-- Use ping command is a workaround because Windows doesn't have a sleep command -->
        <Exec Command="for /L %%i in (1,1,$(NumberOfClients)) do (start &quot;&quot; &quot;$(GameExePath)&quot; -deepprofiling -profiler-maxusedmemory 2404217728 &amp; if %%i lss $(NumberOfClients) (ping 127.0.0.1 -n $(PingDelay) &gt; nul))" />
    </Target>
</Project>
